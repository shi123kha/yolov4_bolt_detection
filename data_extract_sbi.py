# -*- coding: utf-8 -*-
"""data_extract_sbi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RPG9m7D1voGE7Hs2wra1vWBLJ48s1lZ3
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

!sudo apt install tesseract-ocr
!pip install pytesseract

"""# New Section"""

from google.colab import drive
drive.mount('/content/drive')

import pytesseract
import shutil
import os
import random
try:
 from PIL import Image
except ImportError:
 import Image

import matplotlib.pyplot as plt
import cv2

im = cv2.imread("3.png", cv2.IMREAD_COLOR)

im = cv2.bitwise_not(im)
plt.imshow(im)
plt.show()

!sudo apt install tesseract-ocr

#pytesseract.pytesseract.tesseract_cmd = r'/usr/local/bin/pytesseract'
pytesseract.pytesseract.tesseract_cmd = r'/usr/bin/tesseract'

image_path_in_colab="/content/drive/MyDrive/YOLOv4/Screenshot 2022-01-17 at 1.57.10 PM.png"
print(pytesseract.image_to_string(Image.open(image_path_in_colab)))
#extract = pytesseract.image_to_string(Image.open(image_path_in_colab))
#print(extract)
#type(extract)

import cv2
import pytesseract
#pytesseract.pytesseract.tesseract_cmd = r'/usr/local/bin/pytesseract'
pytesseract.pytesseract.tesseract_cmd = r'/usr/bin/tesseract'
#pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"





# Load image, grayscale, and Otsu's threshold
image = cv2.imread('/content/drive/MyDrive/YOLOv4/Screenshot 2022-01-17 at 1.57.10 PM.png')
#image = cv2.imread('/content/drive/MyDrive/YOLOv4/Training8.jpg')
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)[1]

# Remove horizontal lines
horizontal_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (50,1))
detect_horizontal = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, horizontal_kernel, iterations=2)
cnts = cv2.findContours(detect_horizontal, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
cnts = cnts[0] if len(cnts) == 2 else cnts[1]
for c in cnts:
    cv2.drawContours(thresh, [c], -1, (0,0,0), 2)

# Remove vertical lines
vertical_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (1,15))
detect_vertical = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, vertical_kernel, iterations=2)
cnts = cv2.findContours(detect_vertical, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
cnts = cnts[0] if len(cnts) == 2 else cnts[1]
for c in cnts:
    cv2.drawContours(thresh, [c], -1, (0,0,0), 3)

# Dilate to connect text and remove dots
kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (10,1))
dilate = cv2.dilate(thresh, kernel, iterations=2)
cnts = cv2.findContours(dilate, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
cnts = cnts[0] if len(cnts) == 2 else cnts[1]
for c in cnts:
    area = cv2.contourArea(c)
    if area < 500:
        cv2.drawContours(dilate, [c], -1, (0,0,0), -1)

# Bitwise-and to reconstruct image
result = cv2.bitwise_and(image, image, mask=dilate)
result[dilate==0] = (255,255,255)

# OCR
data = pytesseract.image_to_string(result, lang='eng',config='--psm 6')
#print(data)

##cv2.imshow('result', result)
#cv2.imshow('dilate', dilate)
#cv2.waitKey()

def trim(input):
  input=input.replace(":","")
  input=input.strip()
  return input
def address_extract(input):
  address_str=''
  Flag=True
  for line in output:
    for value in attribute['Address']:
        if value in line:
          print("@@@",line,value)
          address_str=address_str+line
          Flag=True
        if(Flag):
          print("$$$",line)
          address_str=address_str+line
          Flag=True
        if(Flag and '\n'):
          Flag=False
  
  print("address_extract",address_str)
          
          #attribute_value = line.replace(val,"")
          #attribute_value = trim(attribute_value)
          #extracted_data[key] = (val,attribute_value)




output=data.split('\n')
for line in output:
  print(line)
#print(output)

attribute={'Address':['Address'],'Account Number':['Account Number'],'IFSC code':['CIF No','IFSC Code'],\
           'Branch':['Branch Name','Branch'],'MICR Code':['MICR Code'],'Nomination Registered':['Nomination Registered','Nominee Registered'],\
           'Date ':['Date'],'Name ':['Account Name'],'Interest Rate':['Interest Rate'],'Branch Code':['Branch Code'],'Available Balance':['Available Balance']}
skip={'Address':['Address']}
extracted_data = {}
address_extract(output)
'''
for line in output:
  for key,values in attribute.items():
    for val in values:
      if val in line:
        if(key not in skip):
          attribute_value = line.replace(val,"")
          attribute_value = trim(attribute_value)
          extracted_data[key] = (val,attribute_value)
          '''
        

print(extracted_data)

extract=extract.split('\n')

extract

l=list()
for i in extract:
  if i!='' and i!=' ':
    l.append(i)
l

import pandas as pd

column=l[8].split(' ')

df =pd.DataFrame(list(zip(l[9].split(' '),l[10].split(' '))),columns=['qty','Description','Unit price','Amount'])





import pandas as pd

l='praveen kumar /n just swee line     time /n/n/n/ kdaf'

l=''.join(l)
l=l.split('/n')
l

l